#include "stdafx.h"

Error::ERROR errors[ERROR_MAX_ENTRY] =
{
	// 0 - 99
	ERROR_ENTRY(0, "Недопустимый код ошибки"),
	ERROR_ENTRY(1, "Системная ошибка: Системный сбой"),
	ERROR_ENTRY_NODEF(2),
	ERROR_ENTRY_NODEF(3),
	ERROR_ENTRY_NODEF(4),
	ERROR_ENTRY_NODEF(5),
	ERROR_ENTRY_NODEF(6),
	ERROR_ENTRY_NODEF(7),
	ERROR_ENTRY_NODEF(8),
	ERROR_ENTRY_NODEF(9),
	ERROR_ENTRY_NODEF10(10),
	ERROR_ENTRY_NODEF10(20),
	ERROR_ENTRY_NODEF10(30),
	ERROR_ENTRY_NODEF10(40),
	ERROR_ENTRY_NODEF10(50),
	ERROR_ENTRY_NODEF10(60),
	ERROR_ENTRY_NODEF10(70),
	ERROR_ENTRY_NODEF10(80),
	ERROR_ENTRY_NODEF10(90),
	// 100 - 109
	ERROR_ENTRY(100,"Ошибка входных параметров: Параметр -in должен быть задан"),
	ERROR_ENTRY(101, "Ошибка входных параметров: Превышена длина входного параметра"),
	ERROR_ENTRY_NODEF(102),
	ERROR_ENTRY_NODEF(103),
	ERROR_ENTRY_NODEF(104),
	ERROR_ENTRY_NODEF(105),
	ERROR_ENTRY_NODEF(106),
	ERROR_ENTRY_NODEF(107),
	ERROR_ENTRY_NODEF(108),
	ERROR_ENTRY_NODEF(109),
	// 110 - 119
	ERROR_ENTRY(110,"Ошибка файла: Ошибка при открытии файла с исходным кодом (-in)"),
	ERROR_ENTRY(111,"Ошибка файла: Недопустимый символ в исходном файле (-in)"),
	ERROR_ENTRY(112,"Ошибка файла: Ошибка при создании файла протокола (-log)"),
	ERROR_ENTRY(113, "Ошибка файла: Превышена длина файла с исходным кодом (-in)"),
	ERROR_ENTRY(114, "Ошибка файла: Ошибка при открытии файла для записи таблицы лексем"),
	ERROR_ENTRY(115, "Ошибка файла: Ошибка при открытии файла для записи таблицы идентификаторов"),
	ERROR_ENTRY(116, "Ошибка файла: Ошибка при создании выходного файла (-out)"),
	ERROR_ENTRY_NODEF(117),
	ERROR_ENTRY_NODEF(118),
	ERROR_ENTRY_NODEF(119),
	// 120 - 199
	ERROR_ENTRY(120, "Таблица лексем: недопустимый размер таблицы при её создании"),
	ERROR_ENTRY(121, "Таблица лексем: превышен допустимый размер таблицы при добавлении элемента"),
	ERROR_ENTRY(122, "Таблица лексем: Недопустимый индекс при получении элемента таблицы"),
	ERROR_ENTRY(123, "Таблица идентификаторов: недопустимый размер таблицы при её создании"),
	ERROR_ENTRY(124, "Таблица идентификаторов: превышен допустимый размер таблицы при добавлении элемента"),
	ERROR_ENTRY(125, "Таблица идентификаторов: Недопустимый индекс при получении элемента таблицы"),
	ERROR_ENTRY(126, "Лексический анализатор: Превышен допустимый размер лексемы"),
	ERROR_ENTRY(127, "Лексический анализатор: нераспознанная лексема"),
	ERROR_ENTRY_NODEF(128, "Таблица идентификаторов: Идентификатор не распознан"),
	ERROR_ENTRY_NODEF(129),
	ERROR_ENTRY_NODEF10(130),
	ERROR_ENTRY_NODEF10(140),
	ERROR_ENTRY_NODEF10(150),
	ERROR_ENTRY_NODEF10(160),
	ERROR_ENTRY_NODEF10(170),
	ERROR_ENTRY_NODEF10(180),
	ERROR_ENTRY_NODEF10(190),
	// 200 - 299
	ERROR_ENTRY(200, "Синтаксический анализатор: неверная структура программы"),
	ERROR_ENTRY(201, "Синтаксический анализатор: ошибочный оператор"),
	ERROR_ENTRY(202, "Синтаксический анализатор: ошибка в выражении"),
	ERROR_ENTRY(203, "Синтаксический анализатор: ошибка в параметрах функции"),
	ERROR_ENTRY(204, "Синтаксический анализатор: ошибка в параметрах вызываемой функции"),
	ERROR_ENTRY(205, "Синтаксический анализатор: ошибка в подвыражении"),
	ERROR_ENTRY(206, "Синтаксический анализатор: недопустимый оператор"),
	ERROR_ENTRY(207, "Синтаксический анализатор: синтаксический анализ завершён досрочно"),
	ERROR_ENTRY_NODEF(208),
	ERROR_ENTRY_NODEF(209),
	ERROR_ENTRY_NODEF10(210),
	ERROR_ENTRY_NODEF10(220),
	ERROR_ENTRY_NODEF10(230),
	ERROR_ENTRY_NODEF10(240),
	ERROR_ENTRY_NODEF10(250),
	ERROR_ENTRY_NODEF10(260),
	ERROR_ENTRY_NODEF10(270),
	ERROR_ENTRY_NODEF10(280),
	ERROR_ENTRY_NODEF10(290),
	// 300 - 399
	ERROR_ENTRY(300, "Семантический анализатор: Отсутствует точка входа в программу"),										
	ERROR_ENTRY(301, "Семантический анализатор: Функция уже была определена"),												
	ERROR_ENTRY(302, "Семантический анализатор: Дублирование параметров функции"),											
	ERROR_ENTRY(303, "Семантический анализатор: Переменная уже была определена"),											
	ERROR_ENTRY(304, "Семантический анализатор: Ошибка данных во время присваивания"),										
	ERROR_ENTRY(305, "Семантический анализатор: Неверное расположение кавычек"),																			
	ERROR_ENTRY(306, "Семантический анализатор: Неверный тип операнда в условии while"),									
	ERROR_ENTRY(307, "Семантический анализатор: Неверная структура условия if/while, должно быть не более двух операндов"),	
	ERROR_ENTRY(308, "Семантический анализатор: "),																			
	ERROR_ENTRY(309, "Семантический анализатор: Функция ничего не возвращает"),												
	ERROR_ENTRY(310, "Семантический анализатор: Тип возвращаемого значения отличается от типа функции"),					
	ERROR_ENTRY(311, "Семантический анализатор: Идентификатор не найден в доступной области видимости"),					
	ERROR_ENTRY(312, "Семантический анализатор: "),																			
	ERROR_ENTRY(313, "Семантический анализатор: Условие if/while должно иметь два значения для сравнения"),					
	ERROR_ENTRY(314, "Семантический анализатор: Неверное указание кол-ва параметров при вызове функции"),													
	ERROR_ENTRY(315, "Семантический анализатор: Неверный тип данных параметров функции при её вызове"),														
	ERROR_ENTRY(316, "Семантический анализатор: В сравнении срок должно быть два операнда"),								
	ERROR_ENTRY(317, "Семантический анализатор: В условии if должно быть более одного операнда"),															
	ERROR_ENTRY(318, "Семантический анализатор: Ошибка, возможен бесконечный цикл"),										
	ERROR_ENTRY(319, "Семантический анализатор: В условии цикла while должно быть более одного операнда"),					
	ERROR_ENTRY(320, "Семантический анализатор: В условии if/while не должно содержаться знаков операций"),					
	ERROR_ENTRY(321, "Семантический анализатор: Функция main уже была определена"),											
	ERROR_ENTRY(322, "Семантический анализатор: Функция main не должна ничего возвращать"),									
	ERROR_ENTRY(323, "Семантический анализатор: Деление на ноль невозможно"),												
	ERROR_ENTRY(324, "Семантический анализатор: Неверное кол-во параметров при вызове функции rand"),																			
	ERROR_ENTRY(325, "Семантический анализатор: Неверное кол-во параметров при вызове функции date"),																			
	ERROR_ENTRY(326, "Семантический анализатор: "),																			
	ERROR_ENTRY(327, "Семантический анализатор: Неверный тип параметра функции isEmpty"),									
	ERROR_ENTRY(328, "Семантический анализатор: Неверный тип параметра функции isEven"),									
	ERROR_ENTRY(329, "Семантический анализатор: Неверный тип параметра функции len"),										
	ERROR_ENTRY(330, "Семантический анализатор: Конструкция writeline не должна быть пустой"),								
	ERROR_ENTRY(331, "Семантический анализатор: Конструкция write не должна быть пустой"),									
	ERROR_ENTRY(332, "Семантический анализатор: Конструкция ret не должна содержать арифметические операции"),				
	ERROR_ENTRY(333, "Семантический анализатор: Функцию нельзя использовать в арифметических операциях"),					
	ERROR_ENTRY(334, "Семантический анализатор: Неверное присваивание переменной типа bool"),								
	ERROR_ENTRY(335, "Семантический анализатор: Операции со строками невозможны"),											
	ERROR_ENTRY(336, "Семантический анализатор: Неверное кол-во параметров при вызове функции isEmpty"),					
	ERROR_ENTRY(337, "Семантический анализатор: Неверное кол-во параметров при вызове функции isEven"),						
	ERROR_ENTRY(338, "Семантический анализатор: Неверное кол-во параметров при вызове функции len"),						
	ERROR_ENTRY(339, "Семантический анализатор: Функцию нельзя использовать в логических операциях"),						
	ERROR_ENTRY(340, "Семантический анализатор: Функцию нельзя использовать в условии if/while"),																						
	ERROR_ENTRY(341, "Семантический анализатор: Конструкция ret не может содержать логические операции"),					
	ERROR_ENTRY(342, "Семантический анализатор: Функция не может возвращать функцию"),										
	ERROR_ENTRY(343, "Семантический анализатор: Функция не может вызывать саму себя"),										
	ERROR_ENTRY(344, "Семантический анализатор: Вложенность невозможна"),													
	ERROR_ENTRY(345, "Семантический анализатор: Функция должна возвращать значение в переменую"),							
	ERROR_ENTRY(346, "Семантический анализатор: "),
	ERROR_ENTRY(347, "Семантический анализатор: "),
	ERROR_ENTRY(348, "Семантический анализатор: "),
	ERROR_ENTRY(349, "Семантический анализатор: "),
	ERROR_ENTRY_NODEF10(350),
	ERROR_ENTRY_NODEF10(360),
	ERROR_ENTRY_NODEF10(370),
	ERROR_ENTRY_NODEF10(380),
	ERROR_ENTRY_NODEF10(390),
	// 400 - 999
	ERROR_ENTRY_NODEF100(400),
	ERROR_ENTRY_NODEF100(500),
	ERROR_ENTRY_NODEF100(600),
	ERROR_ENTRY_NODEF100(700),
	ERROR_ENTRY_NODEF100(800),
	ERROR_ENTRY_NODEF100(900)
};

Error::ERROR Error::geterror(int id)
{
	if (id > 0 && id < ERROR_MAX_ENTRY)
	{
		return errors[id];
	}
	else
	{
		return errors[0];
	}
}

Error::ERROR Error::geterrorin(int id, int line = -1, int col = -1)
{
	if (id > 0 && id < ERROR_MAX_ENTRY)
	{
		errors[id].intext.col = col;
		errors[id].intext.line = line;
		return errors[id];
	}
	else
	{
		return errors[0];
	}
}